@* @page "/login" *@

@typeparam TUser where TUser : class
@using Microsoft.AspNetCore.Components.Forms
@using System.Web
@inject IBlazorSignInManager<TUser> SignInManager
@using TangyWeb_Server.Classes
@using Tangy_Models
@using Tangy_Webserver.Serivce.IService
@inject IAuthenticationService IAuthService
@inject NavigationManager nav

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-5 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <EditForm Model="@signInModel" >
            <div class="mb-3">
                <label for="username">Username</label>
                <InputText @bind-Value="@signInModel.UserName" class="form-control" placeholder="Username" />
                <ValidationMessage For="@(() => signInModel.UserName)" />
            </div>
            <div class="mb-3">
                <label for="password">Password</label>
                <InputText @bind-Value="@signInModel.Password" type="password" class="form-control" placeholder="Password" />
                <ValidationMessage For="@(() => signInModel.Password)" />
            </div>
            <div class="mb-3 d-grid gap-2">
                <button @onclick="HandleSubmit" type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private EditContext? editContext;
    private SignInRequestDTO signInModel = new();
    private ValidationMessageStore? messageStore;

    [Parameter]
    public EventCallback OnLogin { get; set; }

    [Parameter]
    public string FailureMessage { get; set; } = "Login failed. Please check the email address and password.";

    protected override void OnInitialized()
    {
        editContext = new(signInModel);
        messageStore = new(editContext);
    }

    private async Task HandleSubmit()
    {
        messageStore?.Clear();

        if (editContext?.Validate() != true)
        {
            return;
        }

        var result = await SignInManager.PasswordSignInAsync(signInModel.UserName, signInModel.Password, false, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            await OnLogin.InvokeAsync();
        }
        else
        {
            messageStore?.Add(() => signInModel, FailureMessage);
            editContext.NotifyValidationStateChanged();
        }
    }
}


@* @code {
    private SignInRequestDTO signInModel = new();
    public bool IsProcessing { get; set; } = false;
    public bool ShowSignInErrors { get; set; }
    public string Errors { get; set; }

    public string ReturnUrl { get; set; }
    
    private async Task LoginUser()
    {
        ShowSignInErrors = false;
        IsProcessing = true;
        var result = await IAuthService.SignIn(signInModel);
        if (result.IsAuthSuccessful)
        {
            //regiration is successful
            var absoluteUri = new Uri(nav.Uri);
            var queryParam = HttpUtility.ParseQueryString(absoluteUri.Query);
            ReturnUrl = queryParam["returnUrl"];
            if (string.IsNullOrEmpty(ReturnUrl))
            {
                nav.NavigateTo("/");
            }
            else
            {
                nav.NavigateTo("/" + ReturnUrl);
            }
        }
        else
        {
            //failure
            Errors = result.ErrorMessage;
            ShowSignInErrors = true;

        }
        IsProcessing = false;
    }
} *@


