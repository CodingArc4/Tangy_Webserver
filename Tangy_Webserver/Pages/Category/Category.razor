@page "/category"
@using Tangy_Busines.Repository.IRepository
@using Tangy_Models
@inject IJSRuntime _js;
@inject ICategoryRepository _repository;
@inject NavigationManager _navigationManager

<_DeleteConfirmation OnButtonClick="ConfirmDelete_Click"></_DeleteConfirmation>

<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-info">Category List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-primary form-control">Add new category.</a>
    </div>
    <div class="col-12">
        @if (Categories.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var objCat in Categories)
                    {
                        <tr>
                            <td>
                                @objCat.Name
                            </td>
                            <td>
                                <NavLink href="@($"category/edit/{objCat.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(objCat.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else{
            if (IsLoading)
            {
                <div class="text-center">
                    <img src="/images/loading.gif" />
                </div>
            }
            else
            {
                <p>No Records Found</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<CategoryDto> Categories { get; set; } = new List<CategoryDto>();
    public bool IsLoading { get; set; } = true;
    private int DeleteCategoryId { get; set; } = 0;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState{get;set;}

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        if (!authState.User.Identity.IsAuthenticated)
        {
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"login?returnUrl={uri.LocalPath}",forceLoad:true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        if (firstrender)
        {
            await LoadCategories();
        }    
    }

    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = _repository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteCategoryId = id;
        _js.InvokeVoidAsync("ShowDeleteConfirmation");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        if (isConfirmed && DeleteCategoryId != 0)
        {
            _repository.Delete(DeleteCategoryId);
            LoadCategories();
            _js.InvokeVoidAsync("HideDeleteConfirmation");
        }
    }
}
